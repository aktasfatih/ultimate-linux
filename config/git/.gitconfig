[user]
    name = Your Name
    email = your.email@example.com
    signingkey = YOUR_GPG_KEY_ID

[core]
    editor = nvim
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore_global
    pager = delta

[init]
    defaultBranch = main

[push]
    default = simple
    autoSetupRemote = true

[pull]
    rebase = true

[fetch]
    prune = true

[merge]
    tool = vimdiff
    conflictstyle = diff3

[diff]
    tool = vimdiff
    colorMoved = default

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true
    light = false
    side-by-side = true
    line-numbers = true
    decorations = true
    syntax-theme = Catppuccin-mocha
    plus-style = "syntax #003800"
    minus-style = "syntax #3f0001"
    features = decorations

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[color]
    ui = true
    diff = auto
    status = auto
    branch = auto
    interactive = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green
    changed = yellow
    untracked = red

[alias]
    # Basic shortcuts
    st = status -sb
    ci = commit
    co = checkout
    br = branch
    df = diff
    dc = diff --cached
    
    # Logging
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    le = log --oneline --decorate
    
    # File history
    filelog = log -u
    fl = log -u
    
    # Modified files
    dl = "!git ll -1"
    dlc = diff --cached HEAD^
    
    # Finding files and content
    f = "!git ls-files | grep -i"
    grep = grep -Ii
    gr = grep -Ii
    
    # Branch management
    ba = branch -a
    bd = branch -d
    bD = branch -D
    
    # Going meta
    aliases = config --get-regexp alias
    
    # Commit shortcuts
    cm = commit -m
    cam = commit -am
    ca = commit --amend
    cane = commit --amend --no-edit
    
    # Working with remotes
    r = remote -v
    
    # Stash
    sl = stash list
    sa = stash apply
    ss = stash save
    sp = stash pop
    
    # Reset
    unstage = reset HEAD --
    uncommit = reset --soft HEAD~1
    
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    
    # Interactive rebase
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    
    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    
    # Undo
    undo = reset --soft HEAD^
    
    # Show the last tag
    lasttag = describe --tags --abbrev=0
    
    # Assume files are unchanged
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    
    # Show word diff
    wdiff = diff --word-diff
    
    # Clean merged branches
    cleanup = "!git branch --merged | grep -v '\\*\\|master\\|main\\|develop' | xargs -n 1 git branch -d"

[credential]
    helper = cache --timeout=3600

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true